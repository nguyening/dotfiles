# BEGIN bash profiling
#PS4='+ $(gdate "+%s.%N")\011 '
#exec 3>&2 2>/tmp/bashstart.$$.log
#set -x

if [ -f ~/.bashrc ]; then
    . ~/.bashrc
fi
# User specific environment and startup programs

UNAME=$(uname)
if [ "$UNAME" = "Darwin" ]; then
    OS="mac"
else
    OS="linux"
fi

if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    SESSION_TYPE=remote/ssh
else
    case $(ps -o comm= -p $PPID) in
        sshd|*/sshd)
            SESSION_TYPE=remote/ssh
        ;;
        *)
            SESSION_TYPE=local
        ;;
    esac
fi

# Set up shell colors
# BASE16_SHELL=$HOME/.config/base16-shell/
# [ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"
[ -z "$TMUX" ] && export TERM=xterm-256color

# Set up bash completion scripts
[[ -f ~/.config/bash/git-completion.bash ]] && source ~/.config/bash/git-completion.bash

# ----------
# Options
# ----------
# set up vi-mode for bash input
set -o vi

# ----------
# Functions
# ----------

function utime() {
    if [[ -n "$1" ]]; then
        # Translate unix timestamp into human-readable date
        date -d @$1
    else
        # Print time in unix format
        date +%s
    fi
}

function htmldiff () {
    pygmentize -l diff -O full=true -f html
}

function gcr () {
    local opts=$@
    git diff $opts -w | htmldiff | pastie
}

function tat () {
    if [ $# -eq 0 ]; then
        tmux -2 -u attach
    else
        tmux -2 -u attach -dt $@
    fi
}

function tmux_pane_title() {
    printf '\033]2;';
    printf "$@";
    printf '\033\\';
}

function set_git_author() {
    local remote=`git ls-remote --get-url 'origin'`
    local pattern='^git@github.com:(.*)';

    # XXX: Git's get-urlmatch depends on having a protocol specified
    # in the remote's URL, so transform them here for compatibility.

    if [[ "$remote" =~ $pattern ]]; then
        remote="https://github.com/${BASH_REMATCH[1]}"
    fi

    local username=$(git config --get-urlmatch user.name "$remote" 2>/dev/null)
    local email=$(git config --get-urlmatch user.email "$remote" 2>/dev/null)

    if [[ -n $username ]]; then
        GIT_AUTHOR_NAME="$username"
        GIT_COMMITTER_NAME="$username"
    fi

    if [[ -n $email ]]; then
        GIT_AUTHOR_EMAIL="$email"
        GIT_COMMITTER_EMAIL="$email"
    fi
}

function gitstring() {
    local git_status=`git status 2>/dev/null`
    local on_branch="On branch ([^${IFS}]*)"
    local on_commit="HEAD detached at ([^${IFS}]*)"
    local color_template='#[fg=colour${index}]${message}#[default]'

    local color='7'
    local ref=''

    if [[ ! $git_status =~ "working tree clean" ]]; then
        color='1'
    elif [[ $git_status =~ "Your branch is ahead of" ]]; then
        color='3'
    elif [[ $git_status =~ "nothing to commit" ]]; then
        color='2'
    fi

    if [[ $git_status =~ $on_branch ]]; then
        ref="${BASH_REMATCH[1]}"
    elif [[ $git_status =~ $on_commit ]]; then
        ref="${BASH_REMATCH[1]}"
    fi

    ref_message=$(echo $color_template | sed -e "s|\${index}|$color|" -e "s|\${message}|$ref|")
    printf "î‚  $ref_message"
}

# TODO: Use a proper hook to do all of these..
function prompt() {
    # Record the history line-by-line
    history -a
    set_git_author

    # local pane_title=""
    # git rev-parse 2>/dev/null

    # if [ $? -eq 0 ]; then
    #     
    #     pane_title="${pane_title} `gitstring`"
    # fi

    # tmux_pane_title "$pane_title"
}

function venv() {
    if [[ -z $VIRTUAL_ENV ]]; then
        virtualenv venv && source venv/bin/activate
    else
        deactivate && rm -r venv/bin/activate
    fi
}

# ----------
# Aliases
# ----------

alias ..="cd .."
alias ...="cd ../.."
alias ll="ls -alh --color=auto --group-directories-first"
alias tmux="tmux -2 -u"     # tell tmux unicode and 256 colors are supported
alias tls="tmux ls"
alias grep="grep --color=auto --line-buffered"

if [ "$OS" = "mac" ]; then
    # XXX: We use aliasing here since OSX does not have an
    # update-alternatives equivalent
    alias vim=nvim

    # NOTE: `brew install coreutils` is necessary for these to work
    alias ls="gls"
    alias cp="gcp"
    alias pbcopy="reattach-to-user-namespace pbcopy"
fi

if [ "$SESSION_TYPE" = "remote/ssh" ]; then
    alias pbcopy="ssh local pbcopy -"
fi

# ----------
# Terminal prompt
# ----------
PS1="\W \$ "
export PROMPT_DIRTRIM=2
export PS1

# ----------
# Shell options
# ----------

# Append commands to history on session close
shopt -s histappend

# Force history to fit on one line
shopt -s cmdhist

# ----------
# envvars
# ----------

if [ -z $PYENV_ROOT ]; then
    PYENV_ROOT="$HOME/.pyenv"
fi

LC_ALL=en_US.UTF-8
LANG=en_US.UTF-8

GOPATH=$HOME/go
GOBIN=$GOPATH/bin
PATH=$PYENV_ROOT/bin:$HOME/.local/bin:$PATH:$HOME/bin:$GOPATH/bin

if [ "$OS" = "linux" ]; then
  PATH=$PATH:/usr/local/go/bin
  GOROOT=/usr/local/go
else
  GOROOT=/usr/local/opt/go/libexec
fi

EDITOR=nvim
PROMPT_COMMAND=prompt

# Use the silver searcher, which considers .ignore files, for fzf
FZF_DEFAULT_COMMAND='ag -l -g ""'

HISTFILESIZE=1000000
HISTSIZE=1000000
HISTTIMEFORMAT='%F %T '

# Ignore commands that start with space, and duplicate commands
HISTCONTROL=ignoreboth

if [ "$OS" = "mac" ]; then
    export LDFLAGS="-I/usr/local/opt/openssl/include -L/usr/local/opt/openssl/lib"
fi

export PROMPT_COMMAND
export GIT_AUTHOR_EMAIL
export GIT_COMMITTER_EMAIL
export GIT_AUTHOR_NAME
export GIT_COMMITTER_NAME
export PATH
export GOROOT
export GOPATH
export GOBIN
export EDITOR
export FZF_DEFAULT_COMMAND

# Only set up the ssh_auth_sock symlink when we are in a remote session
if [ "$SESSION_TYPE" = "remote/ssh" ]; then
    export SSH_AUTH_SOCK=$HOME/.ssh/ssh_auth_sock
fi

# Set up the default shell to bash 4.4 on OS X, since the default is old
if [ "$OS" = "mac" ]; then
    SHELL=`which bash`

    export SHELL
fi

# Set up Z - directory hopper
# XXX: This needs to be at the end of the file because of reasons
[[ -f ~/.config/bash/z/z.sh ]] && . ~/.config/bash/z/z.sh

# END bash profiling
#set +x
#exec 2>&3 3>&-
